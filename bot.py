# RIDNESS Telegram-bot (final merged version)
# ‚Äî –ö–∞—Ç–∞–ª–æ–≥ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
# ‚Äî –†–∞–±–æ—á–∏–π Ridness Club (–∞–Ω–∫–µ—Ç–∞ + –ø—Ä–æ–º–æ–∫–æ–¥ + LTV)
# ‚Äî –ü—Ä–µ–¥–∑–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤
# ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å emoji-–¥–∏–∑–∞–π–Ω–æ–º
# ‚Äî –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã /ping, /stats, /add_sale
# aiogram 2.25.2  |  Python 3.9+

import os
import sys
import json
import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# logging
logging.basicConfig(
    filename="bot.log",
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)

# env
load_dotenv()
TOKEN = os.getenv("TG_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
GROUP_ID = int(os.getenv("GROUP_ID", "0"))
if not TOKEN:
    sys.exit("TG_TOKEN missing in .env")

# aiogram init
bot = Bot(token=TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# throttling (works only in aiogram 2.x)
try:
    from aiogram.contrib.middlewares.throttling import ThrottlingMiddleware
    dp.middleware.setup(ThrottlingMiddleware(rate_limit=1.0))
except ImportError:
    pass  # aiogram 3.x ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏–º

# Utility: JSON storage
CATALOG_FILE = "catalog.json"
CLUB_FILE = "club_members.json"


def load_catalog():
    if not os.path.exists(CATALOG_FILE):
        return {}
    with open(CATALOG_FILE, encoding="utf-8") as f:
        return json.load(f)


def load_club():
    if not os.path.exists(CLUB_FILE):
        return []
    return json.load(open(CLUB_FILE, encoding="utf-8"))


def save_club(data):
    json.dump(data, open(CLUB_FILE, "w", encoding="utf-8"), indent=2, ensure_ascii=False)


def is_member(user_id: int) -> bool:
    """Return True if user is already in the club."""
    return any(u.get("user_id") == user_id for u in load_club())


def get_member(user_id: int):
    """Return member record or None."""
    for u in load_club():
        if u.get("user_id") == user_id:
            return u
    return None


# Global helpers
order_map = {}
order_count = 0


# Keyboards

def main_menu() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ù–æ–≤–æ—Å—Ç–∏", "–ö–∞—Ç–∞–ª–æ–≥")
    kb.add("–ü—Ä–µ–¥–∑–∞–∫–∞–∑", "üêé RIDNESS Club")
    kb.add("–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–ê–¥—Ä–µ—Å–∞")
    return kb


def guest_menu() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üêé RIDNESS Club")
    return kb


async def require_membership(msg: types.Message):
    """Notify user that a feature requires club membership."""
    await msg.answer(
        "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º RIDNESS Club.",
        reply_markup=guest_menu(),
    )


def categories_kb(cat_list):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for c in cat_list:
        kb.add(c)
    kb.add("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return kb


# Basic commands
@dp.message_handler(commands="start")
async def cmd_start(msg: types.Message):
    if is_member(msg.from_user.id):
        await msg.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>RIDNESS</b> ‚Äî —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å–∞–º—ã—Ö —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –≤—Å–∞–¥–Ω–∏–∫–æ–≤.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá",
            reply_markup=main_menu(),
        )
    else:
        await msg.answer(
            "RIDNESS Club ‚Äî —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å–∞–º—ã—Ö —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –≤—Å–∞–¥–Ω–∏–∫–æ–≤.\n"
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É –∏ –ø—Ä–µ–¥–∑–∞–∫–∞–∑—É –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–ª—É–±.",
            reply_markup=guest_menu(),
        )


@dp.message_handler(commands="ping")
async def cmd_ping(msg: types.Message):
    await msg.answer("pong")


# –ù–æ–≤–æ—Å—Ç–∏
@dp.message_handler(lambda m: m.text == "–ù–æ–≤–æ—Å—Ç–∏")
async def show_news(msg: types.Message):
    if not is_member(msg.from_user.id):
        await require_membership(msg)
        return
    await msg.answer(
        "üî• <b>–ù–æ–≤–æ—Å—Ç–∏ RIDNESS</b>\n"
        "‚Ä¢ –ù–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞!\n"
        "‚Ä¢ –î–æ 15 –∏—é–Ω—è —Å–∫–∏–¥–∫–∞ 10 % –Ω–∞ –±—Ä–∏–¥–∂–∏.\n"
        "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
        reply_markup=main_menu(),
    )


# –ö–∞—Ç–∞–ª–æ–≥
@dp.message_handler(lambda m: m.text == "–ö–∞—Ç–∞–ª–æ–≥")
async def choose_category(msg: types.Message):
    if not is_member(msg.from_user.id):
        await require_membership(msg)
        return
    catalog = load_catalog()
    if not catalog:
        await msg.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç üöß", reply_markup=main_menu())
        return
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_kb(catalog.keys()))


@dp.message_handler(lambda m: m.text == "–ü—Ä–µ–¥–∑–∞–∫–∞–∑")
async def preorder_from_menu(msg: types.Message):
    if not is_member(msg.from_user.id):
        await require_membership(msg)
        return
    await choose_category(msg)


@dp.message_handler(lambda m: m.text and m.text in load_catalog())
async def show_items(msg: types.Message):
    if not is_member(msg.from_user.id):
        await require_membership(msg)
        return
    catalog = load_catalog()
    cat = msg.text
    items = catalog.get(cat, [])
    if not items:
        await msg.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –ø—É—Å—Ç–æ.", reply_markup=categories_kb(catalog.keys()))
        return

    for idx, item in enumerate(items):
        key = f"{cat}:{idx}"
        order_map[key] = (cat, idx)
        caption = (
            f"üÜï <b>{item['name']}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: {item['price']}\n"
            f"{item['desc']}"
        )
        kb = types.InlineKeyboardMarkup().row(
            types.InlineKeyboardButton("üõí –ü—Ä–µ–¥–∑–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order:{key}"),
            types.InlineKeyboardButton("üåê –°–∞–π—Ç", url="https://ridness.ru"),
        )
        photo_path = item.get("photo", "")
        if photo_path and os.path.exists(photo_path):
            with open(photo_path, "rb") as ph:
                await msg.answer_photo(ph, caption=caption, reply_markup=kb)
        else:
            await msg.answer(caption, reply_markup=kb)

    await msg.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ ¬´–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.",
        reply_markup=categories_kb(catalog.keys()),
    )


# FSM –ø—Ä–µ–¥–∑–∞–∫–∞–∑
class PreOrder(StatesGroup):
    qty = State()
    comment = State()


@dp.callback_query_handler(lambda c: c.data.startswith("order:"))
async def order_start(cb: types.CallbackQuery, state: FSMContext):
    if not is_member(cb.from_user.id):
        await cb.answer("–¢–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª—É–±–∞", show_alert=True)
        return
    key = cb.data.split(":", 1)[1]
    if key not in order_map:
        await cb.answer("–û—à–∏–±–∫–∞ —Ç–æ–≤–∞—Ä–∞", show_alert=True)
        return
    cat, idx = order_map[key]
    catalog = load_catalog()
    item = catalog[cat][idx]
    member = get_member(cb.from_user.id) or {}
    await state.update_data(
        item=item["name"],
        name=member.get("name", ""),
        contact=member.get("phone") or member.get("email", ""),
    )
    await bot.send_message(cb.from_user.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await PreOrder.qty.set()
    await cb.answer()


# —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞

def is_cancel(msg):
    return msg.text and msg.text.lower() == "–æ—Ç–º–µ–Ω–∞"


@dp.message_handler(state=PreOrder.qty)
async def po_comment(msg: types.Message, state: FSMContext):
    if is_cancel(msg):
        await state.finish()
        await msg.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
        return
    await state.update_data(qty=msg.text)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).add("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–û—Ç–º–µ–Ω–∞")
    await msg.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª):", reply_markup=kb)
    await PreOrder.comment.set()


@dp.message_handler(state=PreOrder.comment)
async def po_finish(msg: types.Message, state: FSMContext):
    if is_cancel(msg):
        await state.finish()
        await msg.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
        return
    data = await state.get_data()
    if msg.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        data["comment"] = msg.text
    global order_count
    order_count += 1
    card = (
        "üõí <b>–ü—Ä–µ–¥–∑–∞–∫–∞–∑</b>\n"
        f"–¢–æ–≤–∞—Ä: {data['item']}\n"
        f"–ò–º—è: {data['name']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\n"
        f"–ö–æ–ª-–≤–æ: {data['qty']}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment', '(–Ω–µ—Ç)')}\n"
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: telegram_bot"
    )
    await bot.send_message(ADMIN_ID, card)
    await bot.send_message(GROUP_ID, card)
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ üì©", reply_markup=main_menu())
    await state.finish()


# –ö–æ–Ω—Ç–∞–∫—Ç—ã
@dp.message_handler(lambda m: m.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(msg: types.Message):
    if not is_member(msg.from_user.id):
        await require_membership(msg)
        return
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("üìû –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="copy_phone"),
        types.InlineKeyboardButton("WhatsApp", url="https://wa.me/74955447166"),
        types.InlineKeyboardButton("Instagram", url="https://www.instagram.com/ridness.equestrian/"),
        types.InlineKeyboardButton("Email", url="mailto:ceo@ridness.ru"),
    )
    await msg.answer(
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 495 544‚Äë71‚Äë66\n"
        "WhatsApp: +7 495 544‚Äë71‚Äë66\n"
        "Instagram: @ridness.equestrian\n"
        "Email: ceo@ridness.ru",
        reply_markup=kb,
    )


@dp.callback_query_handler(lambda c: c.data == "copy_phone")
async def copy_phone(cb: types.CallbackQuery):
    await cb.answer("–¢–µ–ª–µ—Ñ–æ–Ω: +7 495 544‚Äë71‚Äë66", show_alert=True)


# –ê–¥—Ä–µ—Å–∞
@dp.message_handler(lambda m: m.text == "–ê–¥—Ä–µ—Å–∞")
async def show_addresses(msg: types.Message):
    if not is_member(msg.from_user.id):
        await require_membership(msg)
        return
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("–ö–°–ö –ü—Ä–æ–≤–∞–Ω—Å", url="https://yandex.com/maps/-/CHGVqL90"),
        types.InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω ¬´–ë–∞–ª–∞–Ω—Å¬ª", url="https://yandex.com/maps/-/CHGVuMzD"),
        types.InlineKeyboardButton("Emerald Stables", url="https://yandex.com/maps/-/CHGVuVKs"),
    )
    await msg.answer("üè¨ –ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞:", reply_markup=kb)


# Ridness Club
class ClubJoin(StatesGroup):
    name = State()
    phone = State()
    email = State()
    agree = State()


@dp.message_handler(lambda m: m.text and ("ridness club" in m.text.lower() or m.text.startswith("üêé")))
async def club_entry(msg: types.Message):
    members = load_club()
    if any(u["user_id"] == msg.from_user.id for u in members):
        await msg.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–ª—É–±–∞ üéâ\n–ü—Ä–æ–º–æ–∫–æ–¥: RIDNESS10", reply_markup=main_menu())
        return
    await msg.answer(
        "RIDNESS Club ‚Äî 10 % —Å–∫–∏–¥–∫–∞ –Ω–∞ —Å–µ–∑–æ–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥–∑–∞–∫–∞–∑—É –Ω–æ–≤–∏–Ω–æ–∫.\n"
        "–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.\n\n–í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è:",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–º–µ–Ω–∞"),
    )
    await ClubJoin.name.set()


@dp.message_handler(state=ClubJoin.name)
async def cj_phone(msg: types.Message, state: FSMContext):
    if is_cancel(msg):
        await state.finish()
        await msg.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
        return
    await state.update_data(name=msg.text)
    await msg.answer(
        "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–º–µ–Ω–∞"),
    )
    await ClubJoin.phone.set()


@dp.message_handler(state=ClubJoin.phone)
async def cj_email(msg: types.Message, state: FSMContext):
    if is_cancel(msg):
        await state.finish()
        await msg.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
        return
    await state.update_data(phone=msg.text)
    await msg.answer(
        "E-mail:",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–º–µ–Ω–∞"),
    )
    await ClubJoin.email.set()


@dp.message_handler(state=ClubJoin.email)
async def cj_agree(msg: types.Message, state: FSMContext):
    if is_cancel(msg):
        await state.finish()
        await msg.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
        return
    await state.update_data(email=msg.text)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).add("–°–æ–≥–ª–∞—Å–µ–Ω", "–û—Ç–º–µ–Ω–∞")
    await msg.answer(
        "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://ridness.ru/privacy",
        reply_markup=kb,
    )
    await ClubJoin.agree.set()


@dp.message_handler(state=ClubJoin.agree)
async def cj_finish(msg: types.Message, state: FSMContext):
    if is_cancel(msg):
        await state.finish()
        await msg.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
        return
    if msg.text != "–°–æ–≥–ª–∞—Å–µ–Ω":
        await msg.answer("–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–∏–µ.", reply_markup=main_menu())
        await state.finish()
        return
    data = await state.get_data()
    members = load_club()
    user = {
        "user_id": msg.from_user.id,
        "name": data.get("name", ""),
        "phone": data.get("phone", ""),
        "email": data.get("email", ""),
        "joined": datetime.now().strftime("%Y-%m-%d %H:%M"),
    }
    members.append(user)
    save_club(members)
    await bot.send_message(
        ADMIN_ID,
        f"üéâ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ Ridness Club:\n{user['name']}\n{user['phone']}\n{user['email']}",
    )
    await msg.answer(
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ RIDNESS Club!\n"
        "–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: <b>RIDNESS10</b>\n"
        "–ü–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ.",
        reply_markup=main_menu(),
    )
    await state.finish()


# ADMIN: /stats, /add_sale
@dp.message_handler(commands="stats")
async def cmd_stats(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    club = load_club()
    await msg.answer(f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª—É–±–∞: {len(club)}\n–ü—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤: {order_count}")


@dp.message_handler(commands="add_sale")
async def cmd_add_sale(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    global order_count
    try:
        n = int(msg.get_args())
        order_count += n
        await msg.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {n}. –í—Å–µ–≥–æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤: {order_count}")
    except Exception:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_sale N")


# Unknown handler
@dp.message_handler()
async def unknown(msg: types.Message):
    kb = main_menu() if is_member(msg.from_user.id) else guest_menu()
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá", reply_markup=kb)


# Bot runner
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

